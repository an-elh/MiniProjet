/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package IHM;

import controller.CompteController;
import controller.TransactionController;
import entite.Client;
import entite.Compte;
import entite.Transaction;
import java.awt.Image;
import java.math.BigDecimal;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class CompteIHM extends javax.swing.JFrame {

    private Client currentClient;
    TransactionController transactionController = new TransactionController();

    public CompteIHM(Client currentClient) {
        initComponents();
        scaleImageToFitLabel();
        this.currentClient = currentClient;
    }

    private void scaleImageToFitLabel() {
        // Get the current image from the JLabel
        ImageIcon icon = (ImageIcon) lblImage.getIcon();  // lblImage is your JLabel
        Image img = icon.getImage();

        // Resize the image to fit the JLabel's width and height
        Image resizedImage = img.getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH);

        // Set the resized image as the icon
        lblImage.setIcon(new ImageIcon(resizedImage));
    }

    public Client getCurrentClient() {
        return currentClient;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblCompte = new javax.swing.JLabel();
        lblSolde = new javax.swing.JLabel();
        lblStatut = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        transactionList = new javax.swing.JTable();
        txtMontant = new javax.swing.JTextField();
        btnRetirer = new javax.swing.JButton();
        btnDeposer = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNbeneficaire = new javax.swing.JTextField();
        btnTransferer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 204, 102));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        lblCompte.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblCompte.setText("N compte");

        lblSolde.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblSolde.setText("Solde");

        lblStatut.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStatut.setText("Statut");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Montant");

        transactionList.setBackground(new java.awt.Color(255, 153, 51));
        transactionList.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        transactionList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Date", "Type", "Montant"
            }
        ));
        jScrollPane1.setViewportView(transactionList);

        txtMontant.setBackground(new java.awt.Color(255, 153, 51));
        txtMontant.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        btnRetirer.setBackground(new java.awt.Color(255, 153, 51));
        btnRetirer.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRetirer.setText("Retirer");
        btnRetirer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetirerActionPerformed(evt);
            }
        });

        btnDeposer.setBackground(new java.awt.Color(255, 153, 51));
        btnDeposer.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDeposer.setText("Deposer");
        btnDeposer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeposerActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 153, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Ma Banque");

        lblImage.setFont(new java.awt.Font("Segoe UI", 0, 5)); // NOI18N
        lblImage.setIcon(new javax.swing.ImageIcon("C:\\Users\\hp\\Downloads\\icons8-logout-50.png")); // NOI18N
        lblImage.setText("jLabel2");
        lblImage.setMaximumSize(new java.awt.Dimension(20, 20));
        lblImage.setMinimumSize(new java.awt.Dimension(20, 20));
        lblImage.setPreferredSize(new java.awt.Dimension(20, 20));
        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImageMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(293, 293, 293)
                .addComponent(jLabel1)
                .addGap(319, 319, 319))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("N compte bénéficiaire");

        txtNbeneficaire.setBackground(new java.awt.Color(255, 153, 51));
        txtNbeneficaire.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtNbeneficaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNbeneficaireActionPerformed(evt);
            }
        });

        btnTransferer.setBackground(new java.awt.Color(255, 153, 51));
        btnTransferer.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnTransferer.setText("Virer");
        btnTransferer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTransfererActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblCompte)
                            .addComponent(lblStatut)
                            .addComponent(lblSolde)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(6, 6, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNbeneficaire, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                                    .addComponent(txtMontant))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRetirer)
                        .addGap(35, 35, 35)
                        .addComponent(btnDeposer)
                        .addGap(30, 30, 30)
                        .addComponent(btnTransferer, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblCompte)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblSolde)
                        .addGap(32, 32, 32)
                        .addComponent(lblStatut)
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtMontant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtNbeneficaire, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRetirer)
                    .addComponent(btnDeposer)
                    .addComponent(btnTransferer))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //to list infos related to the account

    public void listInfo() {
        CompteController compteCon = new CompteController();
        Compte compte = compteCon.getCompte(currentClient.getClientId());
        lblCompte.setText("Numéro du compte : " + compte.getNumCompte());
        lblSolde.setText("Solde : " + compte.getSolde());
        lblStatut.setText("Statut : " + compte.getStatut());
    }

    public void retirer() {
        CompteController compteCon = new CompteController();
        Compte compte = compteCon.getCompte(currentClient.getClientId());

        // Check if the input is empty
        String text = txtMontant.getText().trim().replace(",", ".");
        if (text.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Please enter an amount to withdraw.",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        BigDecimal solde = compte.getSolde();
        try {
            // Convert it to BigDecimal
            BigDecimal montant = new BigDecimal(text);

            // Compare montant with solde
            if (montant.compareTo(solde) > 0) {
                // Show a message box if montant is greater than solde
                JOptionPane.showMessageDialog(null,
                        "The amount exceeds the available balance.\nPlease enter a smaller amount.",
                        "Insufficient Balance",
                        JOptionPane.ERROR_MESSAGE);  // Display error icon with a red color
            } else {
                BigDecimal nouveauSolde = solde.subtract(montant);
                boolean isUpdated = compteCon.updateSolde(compte.getNumCompte(), nouveauSolde);

                if (isUpdated) {
                    System.out.println("Converted value: " + montant);
                    System.out.println("Nouveau solde : " + nouveauSolde);

                    // Create the transaction
                    TransactionController transactionController = new TransactionController();
                    boolean transactionCreated = transactionController.createTransaction(
                            "Withdrawal", montant, new java.util.Date(), compte.getNumCompte()
                    );

                    if (transactionCreated) {
                        // Update the UI with the new balance
                        lblSolde.setText("Solde : " + nouveauSolde);
                        JOptionPane.showMessageDialog(null,
                                "Withdrawal successful.\nNew balance: " + nouveauSolde,
                                "Success",
                                JOptionPane.INFORMATION_MESSAGE);
                        txtMontant.setText("");  // Clear the text field
                    } else {
                        JOptionPane.showMessageDialog(null,
                                "Failed to record the transaction.",
                                "Transaction Error",
                                JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(null,
                            "Failed to update the account balance.",
                            "Database Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
                    "Invalid input. Please enter a valid number.",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);  // Display warning icon
        }
    }

    public void deposer() {
        CompteController compteCon = new CompteController();
        Compte compte = compteCon.getCompte(currentClient.getClientId());

        // Check if the input is empty
        String text = txtMontant.getText().trim().replace(",", ".");
        if (text.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Please enter an amount to deposit.",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            // Convert the text to BigDecimal
            BigDecimal montant = new BigDecimal(text);

            // Add montant to the current balance (solde)
            BigDecimal solde = compte.getSolde();
            BigDecimal nouveauSolde = solde.add(montant);

            // Update the balance in the database
            boolean isUpdated = compteCon.updateSolde(compte.getNumCompte(), nouveauSolde);

            if (isUpdated) {
                // Create the transaction
                TransactionController transactionController = new TransactionController();
                boolean transactionCreated = transactionController.createTransaction(
                        "Deposit", montant, new java.util.Date(), compte.getNumCompte()
                );
                if (transactionCreated) {
                    // Update the UI with the new balance
                    lblSolde.setText("Solde : " + nouveauSolde);
                    JOptionPane.showMessageDialog(null,
                            "Deposit successful.\nNew balance: " + nouveauSolde,
                            "Success",
                            JOptionPane.INFORMATION_MESSAGE);
                    txtMontant.setText("");  // Clear the text field
                } else {
                    JOptionPane.showMessageDialog(null,
                            "Failed to record the transaction.",
                            "Transaction Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null,
                        "Failed to update the account balance.",
                        "Database Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
                    "Invalid input. Please enter a valid number.",
                    "Input Error",
                    JOptionPane.WARNING_MESSAGE);  // Display warning icon
        }
    }

    public void transferMontant() {
        CompteController compteCon = new CompteController();
        Compte compteExpediteur = compteCon.getCompte(currentClient.getClientId());

        String montantText = txtMontant.getText().trim().replace(",", ".");
        String numBeneficiaire = txtNbeneficaire.getText().trim();

        if (montantText.isEmpty() || numBeneficiaire.isEmpty()) {
            JOptionPane.showMessageDialog(null,
                    "Veuillez saisir le montant et le numéro de compte du bénéficiaire.",
                    "Champ manquant",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            BigDecimal montant = new BigDecimal(montantText);

            if (compteExpediteur.getNumCompte().equals(numBeneficiaire)) {
                JOptionPane.showMessageDialog(null,
                        "Vous ne pouvez pas effectuer un virement vers votre propre compte.",
                        "Erreur de virement",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (montant.compareTo(BigDecimal.ZERO) <= 0) {
                JOptionPane.showMessageDialog(null,
                        "Veuillez saisir un montant supérieur à 0.",
                        "Montant invalide",
                        JOptionPane.WARNING_MESSAGE);
                return;
            }

            if (compteExpediteur.getSolde().compareTo(montant) < 0) {
                JOptionPane.showMessageDialog(null,
                        "Le montant dépasse votre solde actuel.",
                        "Solde insuffisant",
                        JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Exécuter le virement
            boolean success = compteCon.effectuerVirement(compteExpediteur.getNumCompte(), numBeneficiaire, montant);

            if (success) {
                // Créer les deux transactions : pour l’expéditeur et pour le bénéficiaire
                TransactionController transactionController = new TransactionController();
                java.util.Date now = new java.util.Date();

                transactionController.createTransaction("Virement envoyé", montant, now, compteExpediteur.getNumCompte());
                transactionController.createTransaction("Virement reçu", montant, now, numBeneficiaire);

                // Mettre à jour l'affichage du solde
                Compte compteMisAJour = compteCon.getCompte(currentClient.getClientId());
                lblSolde.setText("Solde : " + compteMisAJour.getSolde());

                JOptionPane.showMessageDialog(null,
                        "Virement effectué avec succès.\nNouveau solde : " + compteMisAJour.getSolde(),
                        "Succès",
                        JOptionPane.INFORMATION_MESSAGE);

                txtMontant.setText("");
                txtNbeneficaire.setText("");
            } else {
                JOptionPane.showMessageDialog(null,
                        "Échec du virement.\nVérifiez que le compte bénéficiaire existe.",
                        "Erreur de virement",
                        JOptionPane.ERROR_MESSAGE);
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null,
                    "Montant invalide. Veuillez saisir un nombre correct.",
                    "Erreur de saisie",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    public void listTransactions() {
        // Get the current account
        CompteController compteCon = new CompteController();
        Compte compte = compteCon.getCompte(currentClient.getClientId());
        // Create the controller for transactions
        TransactionController transactionController = new TransactionController();
        // Retrieve the transactions for the current account
        List<Transaction> transactions = transactionController.getTransactions(compte.getNumCompte());

        // Get the DefaultTableModel of the transactionList JTable
        DefaultTableModel model = (DefaultTableModel) transactionList.getModel();

        // Clear any existing rows
        model.setRowCount(0);

        // Loop through the transactions and add them to the table
        for (Transaction transaction : transactions) {
            Object[] row = {
                transaction.getDateTransaction(),
                transaction.getType(),
                transaction.getMontant()
            };
            model.addRow(row);
        }
    }


    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        listInfo();
        listTransactions();
    }//GEN-LAST:event_formWindowOpened

    private void btnRetirerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetirerActionPerformed
        retirer();
        listTransactions();
    }//GEN-LAST:event_btnRetirerActionPerformed

    private void btnDeposerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeposerActionPerformed
        deposer();
        listTransactions();
    }//GEN-LAST:event_btnDeposerActionPerformed

    private void lblImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseClicked
        LoginIHM login = new LoginIHM();
        login.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lblImageMouseClicked

    private void btnTransfererActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTransfererActionPerformed
        transferMontant();
        listTransactions();
    }//GEN-LAST:event_btnTransfererActionPerformed

    private void txtNbeneficaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNbeneficaireActionPerformed
        //TODO HERE
    }//GEN-LAST:event_txtNbeneficaireActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompteIHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompteIHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompteIHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompteIHM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Client currentClient = new Client(); // Create a new Client object
                CompteIHM compteIHM = new CompteIHM(currentClient);
                compteIHM.setVisible(true);  // Show the window
                // Access currentClient via the instance
                Client client = compteIHM.getCurrentClient();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeposer;
    private javax.swing.JButton btnRetirer;
    private javax.swing.JButton btnTransferer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCompte;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblSolde;
    private javax.swing.JLabel lblStatut;
    private javax.swing.JTable transactionList;
    private javax.swing.JTextField txtMontant;
    private javax.swing.JTextField txtNbeneficaire;
    // End of variables declaration//GEN-END:variables
}
